/**
 * 1~n整数中1出现的次数
 * 注意审题，例如，当 n=12 时，数字中有出现 1 的有 [1, 10, 11, 12]，
 * 所以 1 出现的次数为 5 次，每一位上的 1 都要计数
 */
public class Problem43 {
    /**
     * 主要思路：设定整数点（如 1、10、100 等等）作为位置点 i（对应n的各位、十位、百位等等），分别对每个数位上有多少包含1的点进行分析
     * 根据设定的整数位置，对n进行分割，分为两部分，高位 n/i，低位 n%i
     * 当 i 表示百位：
     *   1. 百位对应的数 >=2,如 n=31456,i=100，则 a=314,b=56，此时百位为1的次数有 a/10+1=32（最高两位 0~31），
     *      每一次都包含100个连续的点，即共有(a%10+1)*100个点的百位为 1；
     *   2. 百位对应的数为 1，如n=31156,i=100，则a=311,b=56，此时百位对应的就是1，
     *      则共有 a%10 (最高两位 0-30 )次是包含 100 个连续点，当最高两位为 31（即 a=311），
     *      本次只对应局部点 00~56，共b+1次，所有点加起来共有 (a%10*100)+(b+1)，这些点百位对应为 1；
     *   3. 百位对应的数为 0,如n=31056,i=100，则 a=310,b=56，此时百位为1的次数有 a/10=31（最高两位 0~30）；
     * 综合以上三种情况，当百位对应0或>=2时，有 (a+8)/10次包含所有100个点，还有当百位为 1(a%10==1)，需要增加局部点 b+1
     * 之所以补8，是因为当百位为 0，则 a/10==(a+8)/10，当百位 >=2，补 8 会产生进位位，效果等同于 (a/10+1)
     */
    public int countDigitOne(int n) {
        int cnt = 0;
        for (long i = 1; i <= n; i *= 10) {
            long a = n / i;
            long b = n % i;
            cnt += (a + 8) / 10 * i + ((a % 10 == 1) ? (b+1) : 0);
        }
        return cnt;
    }
}
